#!/usr/bin/env bash
GITROOT=$(git rev-parse --show-toplevel)
# shellcheck disable=SC1091
. "${GITROOT}"/lib/strict-mode
strictMode

ANSI_NO_COLOR=$'\033[0m'

function msg_info() {
  local GREEN=$'\033[0;32m'
  printf "%s\n" "${GREEN}${*}${ANSI_NO_COLOR}" >&2
}

function msg_warn() {
  local YELLOW=$'\033[0;33m'
  printf "%s\n" "${YELLOW}${*}${ANSI_NO_COLOR}" >&2
}

function msg_error() {
  local RED=$'\033[0;31m'
  printf "%s\n" "${RED}${*}${ANSI_NO_COLOR}" >&2
}

function msg_fatal() {
  msg_error "${*}"
  exit 1
}

function get_operatingsystem() {
  local kernel_name
  kernel_name="$(uname)"
  case "${kernel_name}" in
    Linux)
      echo -n 'Linux'
      ;;
    Darwin)
      echo -n 'MacOS'
      ;;
    *)
      msg_fatal "Sorry, ${kernel_name} is not supported."
      ;;
  esac
}

function get_ips() {
  case "$(get_operatingsystem)" in
    Linux)
      hostname -I | tr '[:space:]' '\n'
      ;;
    MacOS)
      ifconfig | grep 'inet ' | grep -v '127.0.0.1' | awk '{ print $2 }'
      ;;
  esac
}

function get_arch() {
  case "$(uname -m)" in
    armv5*) echo -n "armv5";;
    armv6*) echo -n "armv6";;
    armv7*) echo -n "armv7";;
    arm64) echo -n "arm64";;
    aarch64) echo -n "arm64";;
    x86) echo -n "386";;
    x86_64) echo -n "amd64";;
    i686) echo -n "386";;
    i386) echo -n "386";;
  esac
}

function return_non_empty_array() {
  declare -a INPUT
  INPUT=("${@}")
  if [[ ${#INPUT[@]} -ne 0 ]]; then
    printf "%s\n" "${INPUT[@]}"
  fi
}

function retry_command() {
  # Source: https://github.com/aws-quickstart/quickstart-linux-utilities/blob/master/quickstart-cfn-tools.source#L413-L433
  # $1 = NumberOfRetries $2 = Command
  # retry_command 10 some_command.sh
  # Command will retry with linear back-off
  local -r __tries="${1}"; shift
  declare -a __run=("${@}")
  local -i __backoff_delay=2
  local __current_try=0
  until "${__run[@]}"
    do
      if (( __current_try == __tries ))
      then
        echo "Tried ${__current_try} times and failed!"
        return 1
      else
        echo "Retrying ...."
        sleep $(((__backoff_delay++) + (__current_try++)))
      fi
    done
}

function join_by {
  local IFS="${1}"
  shift
  echo "${*}"
}

function transfer_file() {
  local FILE="${1}"
  local INSTANCE=${2}
  if command -v "multipass" &> /dev/null ; then
    multipass transfer -v "${FILE}" "${INSTANCE}":/home/ubuntu/"${FILE##*/}"
  else
    scp "${FILE}" "${INSTANCE}":/home/laborant/"${FILE##*/}"
  fi
}

function warn () {
    echo "$0:" "$@" >&2
}